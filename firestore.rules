
rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    /* =========================
       Helpers & Role predicates
       ========================= */
    function isAuth() {
      return request.auth != null;
    }

    function hasRole(r) {
      return isAuth() && request.auth.token.role != null && request.auth.token.role == r;
    }

    function isAdmin() { return hasRole('admin'); }
    function isProctor() { return hasRole('giam_thi'); }
    function isHomeroom() { return hasRole('homeroom_teacher') || hasRole('giao_vien_chu_nhiem'); }
    function isReadOnlyBoss() {
      return hasRole('hieu_truong') || hasRole('pho_hieu_truong') || hasRole('nhan_vien_cntt');
    }

    // Centralized function to grant Admin-like READ access
    function canReadEverything() {
        return isAdmin() || isHomeroom() || isReadOnlyBoss();
    }

    /* =========================
       Rules per Collection
       ========================= */

    /* USERS */
    match /users/{uid} {
      allow get, list: if canReadEverything() || (isAuth() && request.auth.uid == uid);
      allow create: if isAuth() && request.auth.uid == uid;
      allow update: if (isAuth() && request.auth.uid == uid
                      && !('roles' in request.resource.data.diff(resource.data).changedKeys())
                      && !('claims' in request.resource.data.diff(resource.data).changedKeys()));
      allow write: if isAdmin();
    }

    /* STUDENTS */
    match /students/{studentId} {
        // FIX: Allow proctors to read student list to create records
        allow read: if canReadEverything() || isProctor();
        allow write: if isAdmin();
    }

    /* RECORDS */
    match /records/{recordId} {
        allow read: if canReadEverything() || isProctor();
        allow create: if isProctor() && request.resource.data.classId is string && request.resource.data.gradeId is string;
        allow update, delete: if isProctor();
        allow write: if isAdmin();
    }

    /* WEEKLY REPORTS & SCORES - Explicit rules for known collections */
    match /weekly_reports/{reportId} {
        allow read: if canReadEverything();
        allow write: if isAdmin();
    }
    match /weeklyScores/{scoreId} { 
        allow read: if canReadEverything();
        allow write: if isAdmin();
    }
    match /weekly_scores/{scoreId} { 
        allow read: if canReadEverything();
        allow write: if isAdmin();
    }

    /* CLASSES & RULES (Publicly readable by any authenticated user) */
    match /classes/{classId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
    match /rules/{ruleId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
    
    // CORRECTED FALLBACK: Grant broad read access, restrict write access.
    match /{document=**} {
        allow read: if canReadEverything();
        allow write: if isAdmin();
    }
  }
}
