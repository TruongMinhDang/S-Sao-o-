\nimport { initializeApp, cert } from \'firebase-admin/app\';\nimport { getFirestore, collection, getDocs, writeBatch, doc, deleteField } from \'firebase-admin/firestore\';\nimport * as fs from \'fs\';\nimport * as path from \'path\';\n\n// =================================================================================\n// Tự động tìm file Service Account\n// =================================================================================\nconst findServiceAccount = () => {\n    const possiblePaths = [\n        path.join(process.cwd(), \'service-account.json\'),\n        path.join(process.cwd(), \'..\/service-account.json\'),\n        path.join(process.cwd(), \'config\', \'service-account.json\'),\n    ];\n\n    for (const p of possiblePaths) {\n        if (fs.existsSync(p)) {\n            console.log(`Tìm thấy file Service Account tại: ${p}`);\n            return p;\n        }\n    }\n    return null;\n};\n\n// =================================================================================\n// Kịch bản di chuyển dữ liệu\n// =================================================================================\n\nconst migrateRules = async () => {\n    const serviceAccountPath = findServiceAccount();\n    if (!serviceAccountPath) {\n        console.error(\"LỖI: Không tìm thấy file \'service-account.json\'.\");\n        console.error(\"Vui lòng tải file này từ trang cài đặt dự án Firebase và đặt nó vào thư mục gốc của dự án.\");\n        process.exit(1);\n    }\n\n    const serviceAccount = JSON.parse(fs.readFileSync(serviceAccountPath, \'utf8\'));\n\n    // Khởi tạo Firebase với quyền Admin\n    initializeApp({\n        credential: cert(serviceAccount),\n        databaseURL: `https://app-quan-ly-hs-default-rtdb.asia-southeast1.firebasedatabase.app`\n    });\n\n    const db = getFirestore();\n    const rulesCollectionRef = collection(db, \'rules\');\n    const batch = writeBatch(db);\n    let migratedCount = 0;\n\n    console.log(\'>>> Bắt đầu quét collection \"rules\" với quyền admin...\');\n    const querySnapshot = await getDocs(rulesCollectionRef);\n\n    querySnapshot.forEach((docSnapshot) => {\n        const data = docSnapshot.data();\n        const docRef = doc(db, \'rules\', docSnapshot.id);\n        \n        if (data.description !== undefined || data.points !== undefined || data.type !== undefined) {\n            console.log(` - Phát hiện định dạng cũ trong tài liệu: ${docSnapshot.id}. Đang chuẩn bị di chuyển...`);\n            \n            const updatePayload: { [key: string]: any } = {};\n\n            if (data.description !== undefined) {\n                updatePayload.content = data.content ?? data.description;\n                updatePayload.description = deleteField();\n            }\n\n            if (data.points !== undefined) {\n                updatePayload.score = data.score ?? data.points;\n                updatePayload.points = deleteField();\n            }\n            \n            if (data.type !== undefined) {\n                updatePayload.type = deleteField();\n            }\n            \n            batch.update(docRef, updatePayload);\n            migratedCount++;\n        }\n    });\n\n    if (migratedCount > 0) {\n        console.log(`\\n>>> Chuẩn bị cập nhật ${migratedCount} tài liệu...`);\n        await batch.commit();\n        console.log(\'✅ Hoàn thành! Dữ liệu đã được đồng bộ sang định dạng mới.\');\n    } else {\n        console.log(\'✅ Không có tài liệu nào cần di chuyển. Dữ liệu của bạn đã được cập nhật!\');\n    }\n};\n\nmigrateRules().catch(error => {\n    console.error(\"Đã có lỗi xảy ra:\", error);\n    process.exit(1);\n});\n\n